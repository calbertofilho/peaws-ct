### VPC ###
# Criação da VPC (vpc)
resource "aws_vpc" "vpc" {
    cidr_block = format("%s", var.project_cidr-blocks["vpc"][0])
    enable_dns_hostnames = true
    enable_dns_support = true
    tags = merge(local.common_tags, {
        Name = format("%s", local.vpc_name)
    })
    lifecycle {
        ignore_changes = [
            tags["Created_Date"]
        ]
    }
}

### SUBNETS ###
# Criação das Subnets Privadas (private_subnet)
resource "aws_subnet" "private_subnet" {
    count = length(data.aws_availability_zones.available_zones.names)
    vpc_id = aws_vpc.vpc.id
    # cidr_block = cidrsubnet(cidrsubnet(aws_vpc.vpc.cidr_block, 2, 2), 8, count.index)
    cidr_block = cidrsubnet(aws_vpc.vpc.cidr_block, 8, count.index+10)
    availability_zone = data.aws_availability_zones.available_zones.names[count.index]
    tags = merge(local.common_tags, {
        Name = format("%s-private%s", local.subnet_name, count.index+1)
    })
    lifecycle {
        ignore_changes = [
            tags["Created_Date"]
        ]
    }
}

# Criação das Subnets Públicas (public_subnet)
resource "aws_subnet" "public_subnet" {
    count = length(data.aws_availability_zones.available_zones.names)
    vpc_id = aws_vpc.vpc.id
    cidr_block = cidrsubnet(aws_vpc.vpc.cidr_block, 8, count.index+20)
    availability_zone = data.aws_availability_zones.available_zones.names[count.index]
    map_public_ip_on_launch = true
    tags = merge(local.common_tags, {
        Name = format("%s-public%s", local.subnet_name, count.index+1)
    })
    lifecycle {
        ignore_changes = [
            tags["Created_Date"]
        ]
    }
}